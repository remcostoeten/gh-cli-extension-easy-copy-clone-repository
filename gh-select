#!/usr/bin/env bash

set -e

# Version info
VERSION="1.0.0"
AUTHOR="Remco Stoeten"
REPO="https://github.com/remcostoeten/gh-repo-select-extension"

# Handle command line arguments
if [[ $# -gt 0 ]]; then
    case "$1" in
        --version|-v)
            echo "gh-select v${VERSION}"
            echo "Created by ${AUTHOR}"
            echo "Repository: ${REPO}"
            exit 0
            ;;
        --help|-h)
            echo "gh-select - Interactive GitHub Repository Selector"
            echo ""
            echo "USAGE:"
            echo "    gh select [OPTIONS]"
            echo ""
            echo "OPTIONS:"
            echo "    --version, -v    Show version information"
            echo "    --help, -h       Show this help message"
            echo ""
            echo "FEATURES:"
            echo "    üîç Interactive repository selection with fuzzy search"
            echo "    üìÅ Clone repositories to any location"
            echo "    üìã Copy repository names or URLs to clipboard"
            echo "    üåê Open repositories in browser"
            echo "    üé® Beautiful interface with live preview"
            echo ""
            echo "DEPENDENCIES:"
            echo "    ‚Ä¢ GitHub CLI (gh) - https://cli.github.com/"
            echo "    ‚Ä¢ fzf (fuzzy finder) - brew install fzf or apt install fzf"
            echo "    ‚Ä¢ jq (JSON processor) - brew install jq or apt install jq"
            echo ""
            echo "EXAMPLES:"
            echo "    gh select              # Launch interactive selector"
            echo "    gh select --help       # Show this help"
            echo "    gh select --version    # Show version"
            echo ""
            echo "For more information: ${REPO}"
            exit 0
            ;;
        repo)
            # Allow 'gh select repo' as mentioned in README
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use 'gh select --help' for usage information"
            exit 1
            ;;
    esac
fi

# Cross-platform clipboard function
copy_to_clipboard() {
    local text="$1"
    
    # macOS
    if command -v pbcopy >/dev/null 2>&1; then
        echo "$text" | pbcopy
        return 0
    fi
    
    # WSL (Windows Subsystem for Linux)
    if command -v clip.exe >/dev/null 2>&1; then
        echo "$text" | clip.exe
        return 0
    fi
    
    # Linux with X11
    if command -v xclip >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
        echo "$text" | xclip -selection clipboard
        return 0
    fi
    
    # Linux with Wayland (check if Wayland is actually running)
    if command -v wl-copy >/dev/null 2>&1; then
        # Check if we can actually connect to Wayland
        if echo "test" | wl-copy 2>/dev/null; then
            echo "$text" | wl-copy
            return 0
        fi
    fi
    
    # Linux alternative clipboard tools
    if command -v xsel >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
        echo "$text" | xsel --clipboard --input
        return 0
    fi
    
    # If all else fails
    return 1
}



# Enhanced dependency checking with installation guidance
check_dependencies() {
    local missing_deps=()
    local error_messages=()
    
    # Check GitHub CLI
    if ! command -v gh >/dev/null 2>&1; then
        missing_deps+=("gh")
        error_messages+=("‚ùå GitHub CLI (gh) is not installed")
        error_messages+=("   üì¶ Install: https://cli.github.com/")
        error_messages+=("   üç∫ macOS: brew install gh")
        error_messages+=("   üêß Ubuntu/Debian: curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg")
        error_messages+=("        echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null")
        error_messages+=("        sudo apt update && sudo apt install gh")
        error_messages+=("   üé© Fedora/CentOS: sudo dnf install gh")
        error_messages+=("   ü™ü Windows: winget install GitHub.cli")
        error_messages+=("")
    fi
    
    # Check fzf
    if ! command -v fzf >/dev/null 2>&1; then
        missing_deps+=("fzf")
        error_messages+=("‚ùå fzf (fuzzy finder) is not installed")
        error_messages+=("   üì¶ Website: https://github.com/junegunn/fzf")
        error_messages+=("   üç∫ macOS: brew install fzf")
        error_messages+=("   üêß Ubuntu/Debian: sudo apt install fzf")
        error_messages+=("   üé© Fedora: sudo dnf install fzf")
        error_messages+=("   üì¶ Manual: git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install")
        error_messages+=("")
    fi
    
    # Check jq
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
        error_messages+=("‚ùå jq (JSON processor) is not installed")
        error_messages+=("   üì¶ Website: https://jqlang.github.io/jq/")
        error_messages+=("   üç∫ macOS: brew install jq")
        error_messages+=("   üêß Ubuntu/Debian: sudo apt install jq")
        error_messages+=("   üé© Fedora: sudo dnf install jq")
        error_messages+=("   ü™ü Windows: winget install jqlang.jq")
        error_messages+=("")
    fi
    
    # If any dependencies are missing, show helpful error and exit
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo "üö® Missing Dependencies"
        echo "======================"
        echo ""
        printf '%s\n' "${error_messages[@]}"
        echo "üí° After installing dependencies, run 'gh select' again"
        echo "üìñ For more help: gh select --help"
        exit 1
    fi
}

# Check all dependencies
check_dependencies

# Check auth
if ! gh auth status >/dev/null 2>&1; then
    echo "Please run: gh auth login"
    exit 1
fi

# Create temp file for repositories
temp_file=$(mktemp)
trap "rm -f '$temp_file'" EXIT

# Fetch repositories
if ! gh repo list --json nameWithOwner,description,isPrivate --limit 1000 > "$temp_file" 2>/dev/null; then
    echo "Error: Failed to fetch repositories"
    exit 1
fi

# Count repos
repo_count=$(jq length "$temp_file")

if [ "$repo_count" -eq 0 ]; then
    echo "No repositories found"
    exit 1
fi

# Create formatted list for fzf
formatted_repos=$(mktemp)
trap "rm -f '$temp_file' '$formatted_repos'" EXIT

jq -r '.[] | (if .isPrivate then "üîí" else "üåç" end) as $privacy | (if .description and .description != "" and .description != null then .description else "No description" end) as $desc | "\(.nameWithOwner) | \($privacy) | \($desc)"' "$temp_file" > "$formatted_repos"

# fzf selection
selected_line=$(cat "$formatted_repos" | fzf \
    --height=80% \
    --layout=reverse \
    --border=rounded \
    --prompt="üîç Select repository > " \
    --header="Navigate: ‚Üë/‚Üì | Filter: type | Select: Enter | Quit: Esc" \
    --delimiter=" | " \
    --with-nth=1,2,3 \
    --preview='echo {} | cut -d"|" -f1 | xargs gh repo view 2>/dev/null || echo "Loading..."' \
    --preview-window=right:60%:wrap) || {
    echo "No repository selected"
    exit 0
}

# Extract repo name
selected_repo=$(echo "$selected_line" | cut -d'|' -f1 | xargs)

if [ -n "$selected_repo" ]; then
    echo
    echo "‚úÖ Selected: ${selected_repo}"
    echo
    echo "What would you like to do?"
    echo "1) Clone repository"
    echo "2) Copy repository name"  
    echo "3) Copy repository URL"
    echo "4) Open in browser"
    echo "5) Just show name and exit"
    
    # Use regular read to avoid arrow key escape sequences
    while true; do
        echo -n "Choice (1-5): "
        read choice
        case $choice in
            [1-5]) break ;;
            *) echo "Please enter a number between 1 and 5." ;;
        esac
    done
    
    case $choice in
        1)
            echo "üì• Cloning ${selected_repo}..."
            gh repo clone "$selected_repo"
            ;;
        2)
            if copy_to_clipboard "$selected_repo"; then
                echo "üìã Copied repository name to clipboard"
            else
                echo "Repository name: $selected_repo"
                echo "(Clipboard not available - name displayed above)"
            fi
            ;;
        3)
            repo_url="https://github.com/$selected_repo"
            if copy_to_clipboard "$repo_url"; then
                echo "üìã Copied repository URL to clipboard"
            else
                echo "Repository URL: $repo_url"
                echo "(Clipboard not available - URL displayed above)"
            fi
            ;;
        4)
            echo "üåê Opening in browser..."
            gh repo view "$selected_repo" --web
            ;;
        5|*)
            echo "$selected_repo"
            ;;
    esac
else
    echo "No repository selected"
fi

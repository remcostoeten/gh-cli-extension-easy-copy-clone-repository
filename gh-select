#!/usr/bin/env bash

# gh-select - GitHub CLI extension for interactive repository selection
# A native GitHub CLI extension that adds repository selection functionality

set -e

export VERSION="1.0.0"

# Colors and styling
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color
readonly BOLD='\033[1m'

# Unicode symbols
readonly REPO_ICON="üìÅ"
readonly CLONE_ICON="‚¨áÔ∏è"
readonly COPY_ICON="üìã"
readonly SEARCH_ICON="üîç"
readonly SUCCESS_ICON="‚úÖ"
readonly ERROR_ICON="‚ùå"

# Function to display colored output
print_colored() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to display header
show_header() {
    echo
    print_colored "$CYAN" "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ"
    print_colored "$CYAN" "‚îÇ          ${BOLD}GitHub Repository Selector${NC}${CYAN}        ‚îÇ"
    print_colored "$CYAN" "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
    print_colored "$CYAN" "‚îÇ  Interactive repository selection tool  ‚îÇ"
    print_colored "$CYAN" "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
    echo
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v gh >/dev/null 2>&1; then
        missing_deps+=("gh (GitHub CLI)")
    fi
    
    if ! command -v fzf >/dev/null 2>&1; then
        missing_deps+=("fzf (fuzzy finder)")
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq (JSON processor)")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_colored "$RED" "${ERROR_ICON} Missing required dependencies:"
        for dep in "${missing_deps[@]}"; do
            print_colored "$YELLOW" "  ‚Ä¢ $dep"
        done
        echo
        print_colored "$BLUE" "Install missing dependencies:"
        print_colored "$WHITE" "  ‚Ä¢ GitHub CLI: https://cli.github.com/"
        print_colored "$WHITE" "  ‚Ä¢ fzf: brew install fzf (macOS) or apt install fzf (Ubuntu)"
        print_colored "$WHITE" "  ‚Ä¢ jq: brew install jq (macOS) or apt install jq (Ubuntu)"
        exit 1
    fi
}

# Function to check GitHub authentication
check_auth() {
    if ! gh auth status >/dev/null 2>&1; then
        print_colored "$RED" "${ERROR_ICON} GitHub CLI not authenticated"
        print_colored "$YELLOW" "Please run: ${BOLD}gh auth login${NC}"
        exit 1
    fi
}

# Function to fetch repositories with loading indicator
fetch_repositories() {
    local temp_file=$(mktemp)
    
    # Show loading indicator
    print_colored "$BLUE" "${SEARCH_ICON} Fetching your repositories..."
    
    # Create a background process for the loading animation
    (
        local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
        local i=0
        while kill -0 $$ 2>/dev/null; do
            printf "\r${BLUE}${chars:$i:1} Loading repositories...${NC}"
            i=$(((i + 1) % ${#chars}))
            sleep 0.1
        done
    ) &
    local spinner_pid=$!
    
    # Fetch repositories
    if gh repo list --limit 1000 --json nameWithOwner,description,updatedAt,isPrivate,url > "$temp_file" 2>/dev/null; then
        kill $spinner_pid 2>/dev/null
        printf "\r${GREEN}${SUCCESS_ICON} Found $(jq length "$temp_file") repositories${NC}\n"
        echo "$temp_file"
    else
        kill $spinner_pid 2>/dev/null
        printf "\r${RED}${ERROR_ICON} Failed to fetch repositories${NC}\n"
        rm -f "$temp_file"
        exit 1
    fi
}

# Function to format repository for display
format_repo_line() {
    local repo_data="$1"
    local name=$(echo "$repo_data" | jq -r '.nameWithOwner')
    local description=$(echo "$repo_data" | jq -r '.description // "No description"')
    local is_private=$(echo "$repo_data" | jq -r '.isPrivate')
    local updated=$(echo "$repo_data" | jq -r '.updatedAt' | cut -d'T' -f1)
    
    local privacy_icon="üåç"
    if [ "$is_private" = "true" ]; then
        privacy_icon="üîí"
    fi
    
    # Truncate description if too long
    if [ ${#description} -gt 60 ]; then
        description="${description:0:57}..."
    fi
    
    printf "%s %s %s | %s | Updated: %s" "$REPO_ICON" "$privacy_icon" "$name" "$description" "$updated"
}

# Function to show repository selector
show_repo_selector() {
    local repos_file="$1"
    
    # Create formatted list for fzf
    local formatted_repos=$(mktemp)
    jq -c '.[]' "$repos_file" | while read -r repo; do
        format_repo_line "$repo"
    done > "$formatted_repos"
    
    # fzf selection with custom preview
    local selected_line=$(cat "$formatted_repos" | fzf \
        --ansi \
        --height=80% \
        --layout=reverse \
        --border=rounded \
        --prompt="${SEARCH_ICON} Select repository > " \
        --header="Navigate: ‚Üë/‚Üì or j/k | Search: type to filter | Select: Enter | Quit: Esc" \
        --preview-window="down:3:wrap" \
        --preview="echo 'Repository: {}' | head -1 | sed 's/.*üìÅ [üåçüîí] \\([^|]*\\).*/\\1/' | xargs -I {} gh repo view {} 2>/dev/null || echo 'Loading repository info...'" \
        --bind="ctrl-c:abort" \
        --bind="esc:abort")
    
    rm -f "$formatted_repos"
    
    if [ -n "$selected_line" ]; then
        # Extract repository name from the formatted line
        echo "$selected_line" | sed 's/.*üìÅ [üåçüîí] \([^|]*\).*/\1/' | xargs
    fi
}

# Function to show action menu
show_action_menu() {
    local repo_name="$1"
    
    echo
    print_colored "$CYAN" "Selected repository: ${BOLD}$repo_name${NC}"
    echo
    print_colored "$WHITE" "Choose an action:"
    print_colored "$GREEN" "  1) ${CLONE_ICON} Clone repository"
    print_colored "$BLUE" "  2) ${COPY_ICON} Copy repository name"
    print_colored "$PURPLE" "  3) ${COPY_ICON} Copy repository URL"
    print_colored "$YELLOW" "  4) üåê View in browser"
    print_colored "$RED" "  5) ‚ùå Cancel"
    echo
    
    while true; do
        read -p "Enter your choice (1-5): " choice
        case $choice in
            1)
                clone_repository "$repo_name"
                break
                ;;
            2)
                copy_to_clipboard "$repo_name"
                break
                ;;
            3)
                copy_to_clipboard "https://github.com/$repo_name"
                break
                ;;
            4)
                view_in_browser "$repo_name"
                break
                ;;
            5)
                print_colored "$YELLOW" "Operation cancelled"
                exit 0
                ;;
            *)
                print_colored "$RED" "Invalid choice. Please enter 1-5."
                ;;
        esac
    done
}

# Function to clone repository
clone_repository() {
    local repo_name="$1"
    
    # Ask for clone path
    echo
    print_colored "$BLUE" "Enter the path where you want to clone the repository:"
    print_colored "$YELLOW" "(Press Enter for current directory: $(pwd))"
    read -p "Clone path: " clone_path
    
    if [ -z "$clone_path" ]; then
        clone_path="."
    fi
    
    # Expand tilde if present
    clone_path="${clone_path/#\~/$HOME}"
    
    # Create directory if it doesn't exist
    if [ "$clone_path" != "." ] && [ ! -d "$clone_path" ]; then
        print_colored "$YELLOW" "Creating directory: $clone_path"
        mkdir -p "$clone_path"
    fi
    
    echo
    print_colored "$BLUE" "${CLONE_ICON} Cloning $repo_name to $clone_path..."
    
    if [ "$clone_path" = "." ]; then
        gh repo clone "$repo_name"
    else
        gh repo clone "$repo_name" "$clone_path/$(basename "$repo_name")"
    fi
    
    if [ $? -eq 0 ]; then
        print_colored "$GREEN" "${SUCCESS_ICON} Successfully cloned $repo_name"
        
        # Ask if user wants to navigate to the directory
        local repo_dir
        if [ "$clone_path" = "." ]; then
            repo_dir="./$(basename "$repo_name")"
        else
            repo_dir="$clone_path/$(basename "$repo_name")"
        fi
        
        echo
        print_colored "$BLUE" "Navigate to the cloned repository?"
        read -p "Change to $repo_dir? (y/N): " navigate
        if [[ $navigate =~ ^[Yy]$ ]]; then
            print_colored "$GREEN" "Run: ${BOLD}cd $repo_dir${NC}"
        fi
    else
        print_colored "$RED" "${ERROR_ICON} Failed to clone $repo_name"
        exit 1
    fi
}

# Function to copy to clipboard
copy_to_clipboard() {
    local text="$1"
    
    # Try different clipboard commands based on the system
    if command -v pbcopy >/dev/null 2>&1; then
        # macOS
        echo "$text" | pbcopy
        print_colored "$GREEN" "${SUCCESS_ICON} Copied to clipboard: $text"
    elif command -v wl-copy >/dev/null 2>&1; then
        # Wayland
        echo "$text" | wl-copy
        print_colored "$GREEN" "${SUCCESS_ICON} Copied to clipboard: $text"
    elif command -v xclip >/dev/null 2>&1; then
        # X11
        echo "$text" | xclip -selection clipboard
        print_colored "$GREEN" "${SUCCESS_ICON} Copied to clipboard: $text"
    elif command -v xsel >/dev/null 2>&1; then
        # Alternative X11
        echo "$text" | xsel --clipboard --input
        print_colored "$GREEN" "${SUCCESS_ICON} Copied to clipboard: $text"
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  Clipboard not available. Text to copy:"
        print_colored "$WHITE" "$text"
    fi
}

# Function to view repository in browser
view_in_browser() {
    local repo_name="$1"
    
    print_colored "$BLUE" "üåê Opening $repo_name in browser..."
    gh repo view "$repo_name" --web
    
    if [ $? -eq 0 ]; then
        print_colored "$GREEN" "${SUCCESS_ICON} Opened in browser"
    else
        print_colored "$RED" "${ERROR_ICON} Failed to open in browser"
    fi
}

# Function to display help
show_help() {
    show_header
    print_colored "$WHITE" "USAGE:"
    print_colored "$BLUE" "  gh select [repo]         Interactive repository selector"
    print_colored "$BLUE" "  gh select --help         Show this help message"
    print_colored "$BLUE" "  gh select --version      Show version information"
    echo
    print_colored "$WHITE" "EXAMPLES:"
    print_colored "$GREEN" "  gh select               # Show interactive repository selector"
    print_colored "$GREEN" "  gh select repo          # Show repository selector (alias)"
    echo
    print_colored "$WHITE" "FEATURES:"
    print_colored "$CYAN" "  ‚Ä¢ Interactive fuzzy search through repositories"
    print_colored "$CYAN" "  ‚Ä¢ Arrow key navigation"
    print_colored "$CYAN" "  ‚Ä¢ Live preview of repository information"
    print_colored "$CYAN" "  ‚Ä¢ Clone to custom path"
    print_colored "$CYAN" "  ‚Ä¢ Copy repository name or URL"
    print_colored "$CYAN" "  ‚Ä¢ Open repository in browser"
    print_colored "$CYAN" "  ‚Ä¢ Works on all Unix-like systems"
    echo
    print_colored "$WHITE" "REQUIREMENTS:"
    print_colored "$YELLOW" "  ‚Ä¢ GitHub CLI (gh) - authenticated"
    print_colored "$YELLOW" "  ‚Ä¢ fzf (fuzzy finder)"
    print_colored "$YELLOW" "  ‚Ä¢ jq (JSON processor)"
    echo
}

# Function to display version
show_version() {
    print_colored "$CYAN" "gh-select version $VERSION"
    print_colored "$WHITE" "GitHub CLI extension for interactive repository selection"
}

# Main function
main() {
    local subcommand="${1:-}"
    
    case "$subcommand" in
        ""|"repo")
            check_dependencies
            check_auth
            show_header
            
            local repos_file=$(fetch_repositories)
            if [ -z "$repos_file" ]; then
                exit 1
            fi
            
            echo
            local selected_repo=$(show_repo_selector "$repos_file")
            rm -f "$repos_file"
            
            if [ -n "$selected_repo" ]; then
                show_action_menu "$selected_repo"
            else
                print_colored "$YELLOW" "No repository selected"
                exit 0
            fi
            ;;
        "--help"|"-h"|"help")
            show_help
            ;;
        "--version"|"-v"|"version")
            show_version
            ;;
        *)
            print_colored "$RED" "${ERROR_ICON} Unknown command: $subcommand"
            print_colored "$YELLOW" "Run 'gh select --help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"

#!/usr/bin/env bash

set -e

# Cross-platform clipboard function
copy_to_clipboard() {
    local text="$1"
    
    # macOS
    if command -v pbcopy >/dev/null 2>&1; then
        echo "$text" | pbcopy
        return 0
    fi
    
    # WSL (Windows Subsystem for Linux)
    if command -v clip.exe >/dev/null 2>&1; then
        echo "$text" | clip.exe
        return 0
    fi
    
    # Linux with X11
    if command -v xclip >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
        echo "$text" | xclip -selection clipboard
        return 0
    fi
    
    # Linux with Wayland (check if Wayland is actually running)
    if command -v wl-copy >/dev/null 2>&1; then
        # Check if we can actually connect to Wayland
        if echo "test" | wl-copy 2>/dev/null; then
            echo "$text" | wl-copy
            return 0
        fi
    fi
    
    # Linux alternative clipboard tools
    if command -v xsel >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
        echo "$text" | xsel --clipboard --input
        return 0
    fi
    
    # If all else fails
    return 1
}


# Function to center text
center_text() {
    local term_width=$(tput cols)
    local text="$1"
    local text_length=${#text}
    local padding=$(( (term_width - text_length) / 2 ))
    printf "%*s%s\n" $padding "" "$text"
}

# Header
echo
center_text "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ"
center_text "‚îÇ        GitHub Repository Selector       ‚îÇ"
center_text "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
center_text "‚îÇ  View, copy  & clone finally fixed..    ‚îÇ"
center_text "‚îÇ  Created by github.com/remcostoeten     ‚îÇ"
center_text "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
echo

# Check dependencies
for cmd in gh fzf jq; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "Error: $cmd is required"
        exit 1
    fi
done

# Check auth
if ! gh auth status >/dev/null 2>&1; then
    echo "Please run: gh auth login"
    exit 1
fi

echo "üîç Fetching your repositories..."

# Create temp file for repositories
temp_file=$(mktemp)
trap "rm -f '$temp_file'" EXIT

# Fetch repositories
if ! gh repo list --json nameWithOwner,description,isPrivate --limit 1000 > "$temp_file" 2>/dev/null; then
    echo "‚ùå Failed to fetch repositories"
    exit 1
fi

# Count repos
repo_count=$(jq length "$temp_file")
echo "‚úÖ Found $repo_count repositories"

if [ "$repo_count" -eq 0 ]; then
    echo "No repositories found"
    exit 1
fi

echo

# Create formatted list for fzf
formatted_repos=$(mktemp)
trap "rm -f '$temp_file' '$formatted_repos'" EXIT

jq -r '.[] | (if .isPrivate then "üîí" else "üåç" end) as $privacy | (if .description and .description != "" and .description != null then .description else "No description" end) as $desc | "\(.nameWithOwner) | \($privacy) | \($desc)"' "$temp_file" > "$formatted_repos"

# fzf selection
selected_line=$(cat "$formatted_repos" | fzf \
    --height=80% \
    --layout=reverse \
    --border=rounded \
    --prompt="üîç Select repository > " \
    --header="Navigate: ‚Üë/‚Üì | Filter: type | Select: Enter | Quit: Esc" \
    --delimiter=" | " \
    --with-nth=1,2,3 \
    --preview='echo {} | cut -d"|" -f1 | xargs gh repo view 2>/dev/null || echo "Loading..."' \
    --preview-window=right:60%:wrap) || {
    echo "No repository selected"
    exit 0
}

# Extract repo name
selected_repo=$(echo "$selected_line" | cut -d'|' -f1 | xargs)

if [ -n "$selected_repo" ]; then
    echo
    echo "‚úÖ Selected: ${selected_repo}"
    echo
    echo "What would you like to do?"
    echo "1) Clone repository"
    echo "2) Copy repository name"  
    echo "3) Copy repository URL"
    echo "4) Open in browser"
    echo "5) Just show name and exit"
    
    # Use regular read to avoid arrow key escape sequences
    while true; do
        echo -n "Choice (1-5): "
        read choice
        case $choice in
            [1-5]) break ;;
            *) echo "Please enter a number between 1 and 5." ;;
        esac
    done
    
    case $choice in
        1)
            echo "üì• Cloning ${selected_repo}..."
            gh repo clone "$selected_repo"
            ;;
        2)
            if copy_to_clipboard "$selected_repo"; then
                echo "üìã Copied repository name to clipboard"
            else
                echo "Repository name: $selected_repo"
                echo "(Clipboard not available - name displayed above)"
            fi
            ;;
        3)
            repo_url="https://github.com/$selected_repo"
            if copy_to_clipboard "$repo_url"; then
                echo "üìã Copied repository URL to clipboard"
            else
                echo "Repository URL: $repo_url"
                echo "(Clipboard not available - URL displayed above)"
            fi
            ;;
        4)
            echo "üåê Opening in browser..."
            gh repo view "$selected_repo" --web
            ;;
        5|*)
            echo "$selected_repo"
            ;;
    esac
else
    echo "No repository selected"
fi
